package src;
// import java.io.*;
import java.io.*;
import java.util.*;
// 12341
public class Main {
    private static final String FILE_NAME = "tasks.txt";

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        List<Task> tasks = loadTasks();

        System.out.println("=== –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: –°–ø–∏—Å–æ–∫ –¥–µ–ª ===");
        System.out.println("–ö–æ–º–∞–Ω–¥—ã: add, list, delete, done, clear, exit");

        while (true) {
            System.out.print("> ");
            if (!scanner.hasNextLine()) {
                System.out.println("\n‚ö†Ô∏è –í–≤–æ–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã.");
                break;
            }

            String command = scanner.nextLine().trim().toLowerCase();

            switch (command) {
                case "add":
                    System.out.print("–í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞—á—É: ");
                    if (!scanner.hasNextLine()) break;
                    String text = scanner.nextLine();
                    tasks.add(new Task(text, false));
                    saveTasks(tasks);
                    System.out.println("‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!");
                    break;

                case "list":
                    if (tasks.isEmpty()) {
                        System.out.println("–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç.");
                    } else {
                        System.out.println("–í–∞—à–∏ –∑–∞–¥–∞—á–∏:");
                        for (int i = 0; i < tasks.size(); i++) {
                            Task t = tasks.get(i);
                            System.out.printf("%d. [%s] %s%n", i + 1, t.isDone() ? "x" : " ", t.getText());
                        }
                    }
                    break;

                case "done":
                    System.out.print("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏: ");
                    if (!scanner.hasNextLine()) break;
                    try {
                        int index = Integer.parseInt(scanner.nextLine()) - 1;
                        if (index >= 0 && index < tasks.size()) {
                            tasks.get(index).setDone(true);
                            saveTasks(tasks);
                            System.out.println("üéØ –ó–∞–¥–∞—á–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è!");
                        } else {
                            System.out.println("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏.");
                        }
                    } catch (NumberFormatException e) {
                        System.out.println("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!");
                    }
                    break;

                case "delete":
                    System.out.print("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ");
                    if (!scanner.hasNextLine()) break;
                    try {
                        int index = Integer.parseInt(scanner.nextLine()) - 1;
                        if (index >= 0 && index < tasks.size()) {
                            System.out.println("üóë –£–¥–∞–ª–µ–Ω–æ: " + tasks.remove(index).getText());
                            saveTasks(tasks);
                        } else {
                            System.out.println("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏.");
                        }
                    } catch (NumberFormatException e) {
                        System.out.println("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!");
                    }
                    break;

                case "clear":
                    tasks.clear();
                    saveTasks(tasks);
                    System.out.println("üßπ –í—Å–µ –∑–∞–¥–∞—á–∏ —É–¥–∞–ª–µ–Ω—ã!");
                    break;

                case "exit":
                    System.out.println("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!");
                    scanner.close();
                    return;

                default:
                    System.out.println("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ: add, list, delete, done, clear, exit");
            }
        }
    }


    private static void saveTasks(List<Task> tasks) {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(FILE_NAME))) {
            for (Task t : tasks) {
                writer.write((t.isDone() ? "1" : "0") + ";" + t.getText());
                writer.newLine();
            }
        } catch (IOException e) {
            System.out.println("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á: " + e.getMessage());
        }
    }

    private static List<Task> loadTasks() {
        List<Task> tasks = new ArrayList<>();
        File file = new File(FILE_NAME);
        if (!file.exists()) return tasks;

        try (BufferedReader reader = new BufferedReader(new FileReader(FILE_NAME))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] parts = line.split(";", 2);
                if (parts.length == 2) {
                    boolean done = parts[0].equals("1");
                    tasks.add(new Task(parts[1], done));
                }
            }
        } catch (IOException e) {
            System.out.println("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞—á: " + e.getMessage());
        }
        return tasks;
    }
}
